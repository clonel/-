import java.util.HashSet;
public class LCS{
  HashSet<String> set = new HashSet<String>();//用来存储最长公共子序列
  //如果只求最长公共子序列的长度，该方法返还C[m][n]即可，m=row.length,n=col.length.且不需要b矩阵
  public void LCSlength(char[] row,char[] col,int[][] c, int[][] b){
		int i,j;
		/*for(i = 0;i <= row.length;i++){
			c[i][0] = 0;
		}
		for(j = 0;j <= col.length;j++){
			c[0][j] = 0;
		}*/
		for(i = 1;i <= row.length;i++){
			for(j = 1;j <= col.length;j++){
				if(row[i-1] == col[j-1]){//c[][]的下标和row的下标要搞清楚
					c[i][j] = c[i-1][j-1] + 1;
					//b[i][j] = 0;
				}
				else if(c[i-1][j] > c[i][j-1]){
					c[i][j] = c[i-1][j];
					b[i][j] = 1;
				}
				else if(c[i-1][j] == c[i][j-1]){
					c[i][j] = c[i-1][j];
					b[i][j] = 2;
				}
				else {
					c[i][j] = c[i][j-1];
					b[i][j] = -1;
				}
			 }//j循环结束		
     }//i循环结束
  }
  
  public void printLCS(int[][] b, char[] row, int i, int j,String str){
		if(i == 0 || j == 0){
			set.add(str);
			return;
		}
		if(b[i][j] == 2){
			printLCS(b,row,i-1,j,str);
			printLCS(b,row,i,j-1,str);
		}
		else if(b[i][j] == 1){
			printLCS(b,row,i-1,j,str);
		}
		else if(b[i][j] == -1){
			printLCS(b,row,i,j-1,str);
		}
		else{/* if(b[i][j] == 0)*/
			str = row[i-1]+str;
			printLCS(b,row,i-1,j-1,str);
		}
	} 
  
  public static void main(String[] args) {
		String A = "abcabcaa";
		String B = "acbacba";
		char[] row = A.toCharArray();
		char[] col = B.toCharArray();
		int[][]c = new int[row.length + 1][col.length + 1];
		int[][]b = new int[row.length + 1][col.length + 1];
		LCS lcs = new LCS();
		lcs.LCSlength(row, col, c, b);
		lcs.printLCS(b,row,row.length,col.length,"");
		for(String s:lcs.set){//打印所有的最长公共子序列
			System.out.println(s);
		}
	}
  
}
